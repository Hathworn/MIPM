; ModuleID = 'matrixmultiplication/matrixmulplication.cpp'
source_filename = "matrixmultiplication/matrixmulplication.cpp"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.HIP_vector_type = type { %struct.HIP_vector_base }
%struct.HIP_vector_base = type { %union.anon }
%union.anon = type { <4 x float> }

; Function Attrs: mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z9mmmKernelP15HIP_vector_typeIfLj4EES1_S1_jj(%struct.HIP_vector_type addrspace(1)* nocapture readonly %0, %struct.HIP_vector_type addrspace(1)* nocapture readonly %1, %struct.HIP_vector_type addrspace(1)* nocapture writeonly %2, i32 %3, i32 %4) local_unnamed_addr #0 {
  %6 = tail call i32 @llvm.amdgcn.workitem.id.x() #2, !range !4
  %7 = tail call align 4 dereferenceable(64) i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #2
  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x() #2
  %9 = getelementptr i8, i8 addrspace(4)* %7, i64 4
  %10 = bitcast i8 addrspace(4)* %9 to i16 addrspace(4)*
  %11 = load i16, i16 addrspace(4)* %10, align 4, !range !5, !invariant.load !6
  %12 = zext i16 %11 to i32
  %13 = mul i32 %8, %12
  %14 = add i32 %13, %6
  %15 = tail call i32 @llvm.amdgcn.workitem.id.y() #2, !range !4
  %16 = tail call i32 @llvm.amdgcn.workgroup.id.y() #2
  %17 = getelementptr i8, i8 addrspace(4)* %7, i64 6
  %18 = bitcast i8 addrspace(4)* %17 to i16 addrspace(4)*
  %19 = load i16, i16 addrspace(4)* %18, align 2, !range !5, !invariant.load !6
  %20 = zext i16 %19 to i32
  %21 = mul i32 %16, %20
  %22 = add i32 %21, %15
  %23 = lshr i32 %4, 2
  %24 = shl i32 %22, 2
  %25 = lshr i32 %3, 2
  %26 = mul i32 %24, %25
  %27 = or i32 %24, 1
  %28 = mul i32 %27, %25
  %29 = or i32 %24, 2
  %30 = mul i32 %29, %25
  %31 = or i32 %24, 3
  %32 = mul i32 %31, %25
  %33 = icmp eq i32 %3, 0
  br i1 %33, label %51, label %72

34:                                               ; preds = %72
  %35 = insertelement <4 x float> poison, float %174, i64 0
  %36 = insertelement <4 x float> %35, float %184, i64 1
  %37 = insertelement <4 x float> %36, float %194, i64 2
  %38 = insertelement <4 x float> %37, float %204, i64 3
  %39 = insertelement <4 x float> poison, float %214, i64 0
  %40 = insertelement <4 x float> %39, float %224, i64 1
  %41 = insertelement <4 x float> %40, float %234, i64 2
  %42 = insertelement <4 x float> %41, float %244, i64 3
  %43 = insertelement <4 x float> poison, float %254, i64 0
  %44 = insertelement <4 x float> %43, float %264, i64 1
  %45 = insertelement <4 x float> %44, float %274, i64 2
  %46 = insertelement <4 x float> %45, float %284, i64 3
  %47 = insertelement <4 x float> poison, float %294, i64 0
  %48 = insertelement <4 x float> %47, float %304, i64 1
  %49 = insertelement <4 x float> %48, float %314, i64 2
  %50 = insertelement <4 x float> %49, float %324, i64 3
  br label %51

51:                                               ; preds = %34, %5
  %52 = phi <4 x float> [ %38, %34 ], [ zeroinitializer, %5 ]
  %53 = phi <4 x float> [ %42, %34 ], [ zeroinitializer, %5 ]
  %54 = phi <4 x float> [ %46, %34 ], [ zeroinitializer, %5 ]
  %55 = phi <4 x float> [ %50, %34 ], [ zeroinitializer, %5 ]
  %56 = mul i32 %24, %23
  %57 = add i32 %56, %14
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %2, i64 %58, i32 0, i32 0, i32 0
  store <4 x float> %52, <4 x float> addrspace(1)* %59, align 16, !tbaa !7
  %60 = mul i32 %27, %23
  %61 = add i32 %60, %14
  %62 = zext i32 %61 to i64
  %63 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %2, i64 %62, i32 0, i32 0, i32 0
  store <4 x float> %53, <4 x float> addrspace(1)* %63, align 16, !tbaa !7
  %64 = mul i32 %29, %23
  %65 = add i32 %64, %14
  %66 = zext i32 %65 to i64
  %67 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %2, i64 %66, i32 0, i32 0, i32 0
  store <4 x float> %54, <4 x float> addrspace(1)* %67, align 16, !tbaa !7
  %68 = mul i32 %31, %23
  %69 = add i32 %68, %14
  %70 = zext i32 %69 to i64
  %71 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %2, i64 %70, i32 0, i32 0, i32 0
  store <4 x float> %55, <4 x float> addrspace(1)* %71, align 16, !tbaa !7
  ret void

72:                                               ; preds = %5, %72
  %73 = phi i32 [ %326, %72 ], [ 0, %5 ]
  %74 = phi <4 x float> [ %325, %72 ], [ zeroinitializer, %5 ]
  %75 = phi <4 x float> [ %285, %72 ], [ zeroinitializer, %5 ]
  %76 = phi <4 x float> [ %245, %72 ], [ zeroinitializer, %5 ]
  %77 = phi <4 x float> [ %205, %72 ], [ zeroinitializer, %5 ]
  %78 = lshr exact i32 %73, 2
  %79 = add i32 %78, %26
  %80 = zext i32 %79 to i64
  %81 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %80, i32 0, i32 0, i32 0, i64 0
  %82 = load float, float addrspace(1)* %81, align 16
  %83 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %80, i32 0, i32 0, i32 0, i64 1
  %84 = load float, float addrspace(1)* %83, align 4
  %85 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %80, i32 0, i32 0, i32 0, i64 2
  %86 = load float, float addrspace(1)* %85, align 8
  %87 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %80, i32 0, i32 0, i32 0, i64 3
  %88 = load float, float addrspace(1)* %87, align 4
  %89 = add i32 %78, %28
  %90 = zext i32 %89 to i64
  %91 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 0, i64 0
  %92 = load float, float addrspace(1)* %91, align 16
  %93 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 0, i64 1
  %94 = load float, float addrspace(1)* %93, align 4
  %95 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 0, i64 2
  %96 = load float, float addrspace(1)* %95, align 8
  %97 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %90, i32 0, i32 0, i32 0, i64 3
  %98 = load float, float addrspace(1)* %97, align 4
  %99 = add i32 %78, %30
  %100 = zext i32 %99 to i64
  %101 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %100, i32 0, i32 0, i32 0, i64 0
  %102 = load float, float addrspace(1)* %101, align 16
  %103 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %100, i32 0, i32 0, i32 0, i64 1
  %104 = load float, float addrspace(1)* %103, align 4
  %105 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %100, i32 0, i32 0, i32 0, i64 2
  %106 = load float, float addrspace(1)* %105, align 8
  %107 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %100, i32 0, i32 0, i32 0, i64 3
  %108 = load float, float addrspace(1)* %107, align 4
  %109 = add i32 %78, %32
  %110 = zext i32 %109 to i64
  %111 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %110, i32 0, i32 0, i32 0, i64 0
  %112 = load float, float addrspace(1)* %111, align 16
  %113 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %110, i32 0, i32 0, i32 0, i64 1
  %114 = load float, float addrspace(1)* %113, align 4
  %115 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %110, i32 0, i32 0, i32 0, i64 2
  %116 = load float, float addrspace(1)* %115, align 8
  %117 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %0, i64 %110, i32 0, i32 0, i32 0, i64 3
  %118 = load float, float addrspace(1)* %117, align 4
  %119 = mul i32 %73, %23
  %120 = add i32 %119, %14
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %121, i32 0, i32 0, i32 0, i64 0
  %123 = load float, float addrspace(1)* %122, align 16
  %124 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %121, i32 0, i32 0, i32 0, i64 1
  %125 = load float, float addrspace(1)* %124, align 4
  %126 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %121, i32 0, i32 0, i32 0, i64 2
  %127 = load float, float addrspace(1)* %126, align 8
  %128 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %121, i32 0, i32 0, i32 0, i64 3
  %129 = load float, float addrspace(1)* %128, align 4
  %130 = or i32 %73, 1
  %131 = mul i32 %130, %23
  %132 = add i32 %131, %14
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %133, i32 0, i32 0, i32 0, i64 0
  %135 = load float, float addrspace(1)* %134, align 16
  %136 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %133, i32 0, i32 0, i32 0, i64 1
  %137 = load float, float addrspace(1)* %136, align 4
  %138 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %133, i32 0, i32 0, i32 0, i64 2
  %139 = load float, float addrspace(1)* %138, align 8
  %140 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %133, i32 0, i32 0, i32 0, i64 3
  %141 = load float, float addrspace(1)* %140, align 4
  %142 = or i32 %73, 2
  %143 = mul i32 %142, %23
  %144 = add i32 %143, %14
  %145 = zext i32 %144 to i64
  %146 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %145, i32 0, i32 0, i32 0, i64 0
  %147 = load float, float addrspace(1)* %146, align 16
  %148 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %145, i32 0, i32 0, i32 0, i64 1
  %149 = load float, float addrspace(1)* %148, align 4
  %150 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %145, i32 0, i32 0, i32 0, i64 2
  %151 = load float, float addrspace(1)* %150, align 8
  %152 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %145, i32 0, i32 0, i32 0, i64 3
  %153 = load float, float addrspace(1)* %152, align 4
  %154 = or i32 %73, 3
  %155 = mul i32 %154, %23
  %156 = add i32 %155, %14
  %157 = zext i32 %156 to i64
  %158 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %157, i32 0, i32 0, i32 0, i64 0
  %159 = load float, float addrspace(1)* %158, align 16
  %160 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %157, i32 0, i32 0, i32 0, i64 1
  %161 = load float, float addrspace(1)* %160, align 4
  %162 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %157, i32 0, i32 0, i32 0, i64 2
  %163 = load float, float addrspace(1)* %162, align 8
  %164 = getelementptr inbounds %struct.HIP_vector_type, %struct.HIP_vector_type addrspace(1)* %1, i64 %157, i32 0, i32 0, i32 0, i64 3
  %165 = load float, float addrspace(1)* %164, align 4
  %166 = fmul contract float %82, %123
  %167 = fmul contract float %84, %135
  %168 = fadd contract float %166, %167
  %169 = fmul contract float %86, %147
  %170 = fadd contract float %168, %169
  %171 = fmul contract float %88, %159
  %172 = fadd contract float %170, %171
  %173 = extractelement <4 x float> %77, i64 0
  %174 = fadd contract float %173, %172
  %175 = insertelement <4 x float> poison, float %174, i64 0
  %176 = fmul contract float %82, %125
  %177 = fmul contract float %84, %137
  %178 = fadd contract float %176, %177
  %179 = fmul contract float %86, %149
  %180 = fadd contract float %178, %179
  %181 = fmul contract float %88, %161
  %182 = fadd contract float %180, %181
  %183 = extractelement <4 x float> %77, i64 1
  %184 = fadd contract float %183, %182
  %185 = insertelement <4 x float> %175, float %184, i64 1
  %186 = fmul contract float %82, %127
  %187 = fmul contract float %84, %139
  %188 = fadd contract float %186, %187
  %189 = fmul contract float %86, %151
  %190 = fadd contract float %188, %189
  %191 = fmul contract float %88, %163
  %192 = fadd contract float %190, %191
  %193 = extractelement <4 x float> %77, i64 2
  %194 = fadd contract float %193, %192
  %195 = insertelement <4 x float> %185, float %194, i64 2
  %196 = fmul contract float %82, %129
  %197 = fmul contract float %84, %141
  %198 = fadd contract float %196, %197
  %199 = fmul contract float %86, %153
  %200 = fadd contract float %198, %199
  %201 = fmul contract float %88, %165
  %202 = fadd contract float %200, %201
  %203 = extractelement <4 x float> %77, i64 3
  %204 = fadd contract float %203, %202
  %205 = insertelement <4 x float> %195, float %204, i64 3
  %206 = fmul contract float %92, %123
  %207 = fmul contract float %94, %135
  %208 = fadd contract float %206, %207
  %209 = fmul contract float %96, %147
  %210 = fadd contract float %208, %209
  %211 = fmul contract float %98, %159
  %212 = fadd contract float %210, %211
  %213 = extractelement <4 x float> %76, i64 0
  %214 = fadd contract float %213, %212
  %215 = insertelement <4 x float> poison, float %214, i64 0
  %216 = fmul contract float %92, %125
  %217 = fmul contract float %94, %137
  %218 = fadd contract float %216, %217
  %219 = fmul contract float %96, %149
  %220 = fadd contract float %218, %219
  %221 = fmul contract float %98, %161
  %222 = fadd contract float %220, %221
  %223 = extractelement <4 x float> %76, i64 1
  %224 = fadd contract float %223, %222
  %225 = insertelement <4 x float> %215, float %224, i64 1
  %226 = fmul contract float %92, %127
  %227 = fmul contract float %94, %139
  %228 = fadd contract float %226, %227
  %229 = fmul contract float %96, %151
  %230 = fadd contract float %228, %229
  %231 = fmul contract float %98, %163
  %232 = fadd contract float %230, %231
  %233 = extractelement <4 x float> %76, i64 2
  %234 = fadd contract float %233, %232
  %235 = insertelement <4 x float> %225, float %234, i64 2
  %236 = fmul contract float %92, %129
  %237 = fmul contract float %94, %141
  %238 = fadd contract float %236, %237
  %239 = fmul contract float %96, %153
  %240 = fadd contract float %238, %239
  %241 = fmul contract float %98, %165
  %242 = fadd contract float %240, %241
  %243 = extractelement <4 x float> %76, i64 3
  %244 = fadd contract float %243, %242
  %245 = insertelement <4 x float> %235, float %244, i64 3
  %246 = fmul contract float %102, %123
  %247 = fmul contract float %104, %135
  %248 = fadd contract float %246, %247
  %249 = fmul contract float %106, %147
  %250 = fadd contract float %248, %249
  %251 = fmul contract float %108, %159
  %252 = fadd contract float %250, %251
  %253 = extractelement <4 x float> %75, i64 0
  %254 = fadd contract float %253, %252
  %255 = insertelement <4 x float> poison, float %254, i64 0
  %256 = fmul contract float %102, %125
  %257 = fmul contract float %104, %137
  %258 = fadd contract float %256, %257
  %259 = fmul contract float %106, %149
  %260 = fadd contract float %258, %259
  %261 = fmul contract float %108, %161
  %262 = fadd contract float %260, %261
  %263 = extractelement <4 x float> %75, i64 1
  %264 = fadd contract float %263, %262
  %265 = insertelement <4 x float> %255, float %264, i64 1
  %266 = fmul contract float %102, %127
  %267 = fmul contract float %104, %139
  %268 = fadd contract float %266, %267
  %269 = fmul contract float %106, %151
  %270 = fadd contract float %268, %269
  %271 = fmul contract float %108, %163
  %272 = fadd contract float %270, %271
  %273 = extractelement <4 x float> %75, i64 2
  %274 = fadd contract float %273, %272
  %275 = insertelement <4 x float> %265, float %274, i64 2
  %276 = fmul contract float %102, %129
  %277 = fmul contract float %104, %141
  %278 = fadd contract float %276, %277
  %279 = fmul contract float %106, %153
  %280 = fadd contract float %278, %279
  %281 = fmul contract float %108, %165
  %282 = fadd contract float %280, %281
  %283 = extractelement <4 x float> %75, i64 3
  %284 = fadd contract float %283, %282
  %285 = insertelement <4 x float> %275, float %284, i64 3
  %286 = fmul contract float %112, %123
  %287 = fmul contract float %114, %135
  %288 = fadd contract float %286, %287
  %289 = fmul contract float %116, %147
  %290 = fadd contract float %288, %289
  %291 = fmul contract float %118, %159
  %292 = fadd contract float %290, %291
  %293 = extractelement <4 x float> %74, i64 0
  %294 = fadd contract float %293, %292
  %295 = insertelement <4 x float> poison, float %294, i64 0
  %296 = fmul contract float %112, %125
  %297 = fmul contract float %114, %137
  %298 = fadd contract float %296, %297
  %299 = fmul contract float %116, %149
  %300 = fadd contract float %298, %299
  %301 = fmul contract float %118, %161
  %302 = fadd contract float %300, %301
  %303 = extractelement <4 x float> %74, i64 1
  %304 = fadd contract float %303, %302
  %305 = insertelement <4 x float> %295, float %304, i64 1
  %306 = fmul contract float %112, %127
  %307 = fmul contract float %114, %139
  %308 = fadd contract float %306, %307
  %309 = fmul contract float %116, %151
  %310 = fadd contract float %308, %309
  %311 = fmul contract float %118, %163
  %312 = fadd contract float %310, %311
  %313 = extractelement <4 x float> %74, i64 2
  %314 = fadd contract float %313, %312
  %315 = insertelement <4 x float> %305, float %314, i64 2
  %316 = fmul contract float %112, %129
  %317 = fmul contract float %114, %141
  %318 = fadd contract float %316, %317
  %319 = fmul contract float %116, %153
  %320 = fadd contract float %318, %319
  %321 = fmul contract float %118, %165
  %322 = fadd contract float %320, %321
  %323 = extractelement <4 x float> %74, i64 3
  %324 = fadd contract float %323, %322
  %325 = insertelement <4 x float> %315, float %324, i64 3
  %326 = add nuw nsw i32 %73, 4
  %327 = icmp ult i32 %326, %3
  br i1 %327, label %72, label %34, !llvm.loop !10
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare align 4 i8 addrspace(4)* @llvm.amdgcn.dispatch.ptr() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.y() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #1

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.y() #1

attributes #0 = { mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 14.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git bdeeab053a8bf72a56bdf54d056a43ecb9dc2748)"}
!4 = !{i32 0, i32 1024}
!5 = !{i16 1, i16 1025}
!6 = !{}
!7 = !{!8, !8, i64 0}
!8 = !{!"omnipotent char", !9, i64 0}
!9 = !{!"Simple C++ TBAA"}
!10 = distinct !{!10, !11}
!11 = !{!"llvm.loop.mustprogress"}
