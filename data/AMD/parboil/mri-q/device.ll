; ModuleID = 'mriq.cpp'
source_filename = "mriq.cpp"
target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
target triple = "amdgcn-amd-amdhsa"

%struct.kValues = type { float, float, float, float }

@ck = protected addrspace(4) externally_initialized global [1024 x %struct.kValues] zeroinitializer, align 16
@llvm.compiler.used = appending addrspace(1) global [1 x i8*] [i8* addrspacecast (i8 addrspace(4)* bitcast ([1024 x %struct.kValues] addrspace(4)* @ck to i8 addrspace(4)*) to i8*)], section "llvm.metadata"

; Function Attrs: mustprogress nofree norecurse nosync nounwind willreturn
define protected amdgpu_kernel void @_Z17ComputePhiMag_GPUPfS_S_i(float addrspace(1)* nocapture readonly %0, float addrspace(1)* nocapture readonly %1, float addrspace(1)* nocapture writeonly %2, i32 %3) local_unnamed_addr #0 {
  %5 = tail call i32 @llvm.amdgcn.workgroup.id.x() #3
  %6 = shl i32 %5, 9
  %7 = tail call i32 @llvm.amdgcn.workitem.id.x() #3, !range !4
  %8 = add i32 %6, %7
  %9 = icmp slt i32 %8, %3
  br i1 %9, label %10, label %20

10:                                               ; preds = %4
  %11 = sext i32 %8 to i64
  %12 = getelementptr inbounds float, float addrspace(1)* %0, i64 %11
  %13 = load float, float addrspace(1)* %12, align 4, !tbaa !5
  %14 = getelementptr inbounds float, float addrspace(1)* %1, i64 %11
  %15 = load float, float addrspace(1)* %14, align 4, !tbaa !5
  %16 = fmul contract float %13, %13
  %17 = fmul contract float %15, %15
  %18 = fadd contract float %16, %17
  %19 = getelementptr inbounds float, float addrspace(1)* %2, i64 %11
  store float %18, float addrspace(1)* %19, align 4, !tbaa !5
  br label %20

20:                                               ; preds = %10, %4
  ret void
}

; Function Attrs: mustprogress nofree norecurse nosync nounwind
define protected amdgpu_kernel void @_Z12ComputeQ_GPUiiPfS_S_S_S_(i32 %0, i32 %1, float addrspace(1)* nocapture readonly %2, float addrspace(1)* nocapture readonly %3, float addrspace(1)* nocapture readonly %4, float addrspace(1)* nocapture %5, float addrspace(1)* nocapture %6) local_unnamed_addr #1 {
  %8 = tail call i32 @llvm.amdgcn.workgroup.id.x() #3
  %9 = shl i32 %8, 8
  %10 = tail call i32 @llvm.amdgcn.workitem.id.x() #3, !range !4
  %11 = add i32 %9, %10
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds float, float addrspace(1)* %2, i64 %12
  %14 = load float, float addrspace(1)* %13, align 4, !tbaa !5
  %15 = getelementptr inbounds float, float addrspace(1)* %3, i64 %12
  %16 = load float, float addrspace(1)* %15, align 4, !tbaa !5
  %17 = getelementptr inbounds float, float addrspace(1)* %4, i64 %12
  %18 = load float, float addrspace(1)* %17, align 4, !tbaa !5
  %19 = getelementptr inbounds float, float addrspace(1)* %5, i64 %12
  %20 = load float, float addrspace(1)* %19, align 4, !tbaa !5
  %21 = getelementptr inbounds float, float addrspace(1)* %6, i64 %12
  %22 = load float, float addrspace(1)* %21, align 4, !tbaa !5
  %23 = and i32 %0, 1
  %24 = icmp eq i32 %23, 0
  br i1 %24, label %318, label %25

25:                                               ; preds = %7
  %26 = load float, float addrspace(4)* getelementptr inbounds ([1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 0, i32 0), align 16, !tbaa !9
  %27 = fmul contract float %14, %26
  %28 = load float, float addrspace(4)* getelementptr inbounds ([1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 0, i32 1), align 4, !tbaa !11
  %29 = fmul contract float %16, %28
  %30 = fadd contract float %27, %29
  %31 = load float, float addrspace(4)* getelementptr inbounds ([1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 0, i32 2), align 8, !tbaa !12
  %32 = fmul contract float %18, %31
  %33 = fadd contract float %30, %32
  %34 = fmul contract float %33, 0x401921FB60000000
  %35 = load float, float addrspace(4)* getelementptr inbounds ([1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 0, i32 3), align 4, !tbaa !13
  %36 = tail call float @llvm.fabs.f32(float %34) #3
  %37 = fcmp olt float %36, 1.310720e+05
  br i1 %37, label %38, label %45

38:                                               ; preds = %25
  %39 = fmul float %36, 0x3FE45F3060000000
  %40 = tail call float @llvm.rint.f32(float %39) #3
  %41 = tail call float @llvm.fma.f32(float %40, float 0xBFF921FB40000000, float %36) #3
  %42 = tail call float @llvm.fma.f32(float %40, float 0xBE74442D00000000, float %41) #3
  %43 = tail call float @llvm.fma.f32(float %40, float 0xBCF8469880000000, float %42) #3
  %44 = fptosi float %40 to i32
  br label %151

45:                                               ; preds = %25
  %46 = bitcast float %36 to i32
  %47 = lshr i32 %46, 23
  %48 = and i32 %46, 8388607
  %49 = or i32 %48, 8388608
  %50 = zext i32 %49 to i64
  %51 = mul nuw nsw i64 %50, 4266746795
  %52 = trunc i64 %51 to i32
  %53 = lshr i64 %51, 32
  %54 = mul nuw nsw i64 %50, 1011060801
  %55 = add nuw nsw i64 %53, %54
  %56 = trunc i64 %55 to i32
  %57 = lshr i64 %55, 32
  %58 = mul nuw nsw i64 %50, 3680671129
  %59 = add nuw nsw i64 %57, %58
  %60 = trunc i64 %59 to i32
  %61 = lshr i64 %59, 32
  %62 = mul nuw nsw i64 %50, 4113882560
  %63 = add nuw nsw i64 %61, %62
  %64 = trunc i64 %63 to i32
  %65 = lshr i64 %63, 32
  %66 = mul nuw nsw i64 %50, 4230436817
  %67 = add nuw nsw i64 %65, %66
  %68 = trunc i64 %67 to i32
  %69 = lshr i64 %67, 32
  %70 = mul nuw nsw i64 %50, 1313084713
  %71 = add nuw nsw i64 %69, %70
  %72 = trunc i64 %71 to i32
  %73 = lshr i64 %71, 32
  %74 = mul nuw nsw i64 %50, 2734261102
  %75 = add nuw nsw i64 %73, %74
  %76 = trunc i64 %75 to i32
  %77 = lshr i64 %75, 32
  %78 = trunc i64 %77 to i32
  %79 = add nsw i32 %47, -120
  %80 = icmp ugt i32 %79, 63
  %81 = select i1 %80, i32 %72, i32 %78
  %82 = select i1 %80, i32 %68, i32 %76
  %83 = select i1 %80, i32 %64, i32 %72
  %84 = select i1 %80, i32 %60, i32 %68
  %85 = select i1 %80, i32 %56, i32 %64
  %86 = select i1 %80, i32 %52, i32 %60
  %87 = select i1 %80, i32 -64, i32 0
  %88 = add nsw i32 %87, %79
  %89 = icmp ugt i32 %88, 31
  %90 = select i1 %89, i32 %82, i32 %81
  %91 = select i1 %89, i32 %83, i32 %82
  %92 = select i1 %89, i32 %84, i32 %83
  %93 = select i1 %89, i32 %85, i32 %84
  %94 = select i1 %89, i32 %86, i32 %85
  %95 = select i1 %89, i32 -32, i32 0
  %96 = add nsw i32 %95, %88
  %97 = icmp ugt i32 %96, 31
  %98 = select i1 %97, i32 %91, i32 %90
  %99 = select i1 %97, i32 %92, i32 %91
  %100 = select i1 %97, i32 %93, i32 %92
  %101 = select i1 %97, i32 %94, i32 %93
  %102 = select i1 %97, i32 -32, i32 0
  %103 = add nsw i32 %102, %96
  %104 = icmp eq i32 %103, 0
  %105 = sub nsw i32 32, %103
  %106 = tail call i32 @llvm.fshr.i32(i32 %98, i32 %99, i32 %105) #3
  %107 = tail call i32 @llvm.fshr.i32(i32 %99, i32 %100, i32 %105) #3
  %108 = tail call i32 @llvm.fshr.i32(i32 %100, i32 %101, i32 %105) #3
  %109 = select i1 %104, i32 %98, i32 %106
  %110 = select i1 %104, i32 %99, i32 %107
  %111 = select i1 %104, i32 %100, i32 %108
  %112 = lshr i32 %109, 29
  %113 = tail call i32 @llvm.fshl.i32(i32 %109, i32 %110, i32 2) #3
  %114 = tail call i32 @llvm.fshl.i32(i32 %110, i32 %111, i32 2) #3
  %115 = tail call i32 @llvm.fshl.i32(i32 %111, i32 %101, i32 2) #3
  %116 = and i32 %112, 1
  %117 = sub nsw i32 0, %116
  %118 = shl i32 %112, 31
  %119 = xor i32 %113, %117
  %120 = xor i32 %114, %117
  %121 = xor i32 %115, %117
  %122 = tail call i32 @llvm.ctlz.i32(i32 %119, i1 false) #3, !range !14
  %123 = sub nsw i32 31, %122
  %124 = tail call i32 @llvm.fshr.i32(i32 %119, i32 %120, i32 %123) #3
  %125 = tail call i32 @llvm.fshr.i32(i32 %120, i32 %121, i32 %123) #3
  %126 = mul nsw i32 %122, -8388608
  %127 = add nsw i32 %126, 1056964608
  %128 = or i32 %127, %118
  %129 = lshr i32 %124, 9
  %130 = or i32 %128, %129
  %131 = bitcast i32 %130 to float
  %132 = tail call i32 @llvm.fshl.i32(i32 %124, i32 %125, i32 23) #3
  %133 = tail call i32 @llvm.ctlz.i32(i32 %132, i1 false) #3, !range !14
  %134 = fmul float %131, 0x3FF921FB40000000
  %135 = add nuw nsw i32 %133, %122
  %136 = mul nsw i32 %135, -8388608
  %137 = add nsw i32 %136, 855638016
  %138 = or i32 %137, %118
  %139 = sub nsw i32 31, %133
  %140 = tail call i32 @llvm.fshr.i32(i32 %132, i32 %125, i32 %139) #3
  %141 = lshr i32 %140, 9
  %142 = or i32 %138, %141
  %143 = bitcast i32 %142 to float
  %144 = fneg float %134
  %145 = tail call float @llvm.fma.f32(float %131, float 0x3FF921FB40000000, float %144) #3
  %146 = tail call float @llvm.fma.f32(float %131, float 0x3E74442D00000000, float %145) #3
  %147 = tail call float @llvm.fma.f32(float %143, float 0x3FF921FB40000000, float %146) #3
  %148 = fadd float %134, %147
  %149 = lshr i32 %109, 30
  %150 = add nuw nsw i32 %116, %149
  br label %151

151:                                              ; preds = %38, %45
  %152 = phi float [ %43, %38 ], [ %148, %45 ]
  %153 = phi i32 [ %44, %38 ], [ %150, %45 ]
  %154 = fmul float %152, %152
  %155 = tail call float @llvm.fmuladd.f32(float %154, float 0xBF29833040000000, float 0x3F81103880000000) #3
  %156 = tail call float @llvm.fmuladd.f32(float %154, float %155, float 0xBFC55553A0000000) #3
  %157 = fmul float %154, %156
  %158 = tail call float @llvm.fmuladd.f32(float %152, float %157, float %152) #3
  %159 = tail call float @llvm.fmuladd.f32(float %154, float 0x3EFAEA6680000000, float 0xBF56C9E760000000) #3
  %160 = tail call float @llvm.fmuladd.f32(float %154, float %159, float 0x3FA5557EE0000000) #3
  %161 = tail call float @llvm.fmuladd.f32(float %154, float %160, float 0xBFE0000080000000) #3
  %162 = tail call float @llvm.fmuladd.f32(float %154, float %161, float 1.000000e+00) #3
  %163 = fneg float %158
  %164 = and i32 %153, 1
  %165 = icmp eq i32 %164, 0
  %166 = select i1 %165, float %162, float %163
  %167 = bitcast float %166 to i32
  %168 = shl i32 %153, 30
  %169 = and i32 %168, -2147483648
  %170 = xor i32 %169, %167
  %171 = bitcast i32 %170 to float
  %172 = tail call i1 @llvm.amdgcn.class.f32(float %36, i32 504) #3
  %173 = select i1 %172, float %171, float 0x7FF8000000000000
  %174 = fmul contract float %35, %173
  %175 = fadd contract float %20, %174
  br i1 %37, label %176, label %184

176:                                              ; preds = %151
  %177 = fmul float %36, 0x3FE45F3060000000
  %178 = tail call float @llvm.rint.f32(float %177) #3
  %179 = tail call float @llvm.fma.f32(float %178, float 0xBFF921FB40000000, float %36) #3
  %180 = tail call float @llvm.fma.f32(float %178, float 0xBE74442D00000000, float %179) #3
  %181 = tail call float @llvm.fma.f32(float %178, float 0xBCF8469880000000, float %180) #3
  %182 = fptosi float %178 to i32
  %183 = bitcast float %36 to i32
  br label %290

184:                                              ; preds = %151
  %185 = bitcast float %36 to i32
  %186 = lshr i32 %185, 23
  %187 = and i32 %185, 8388607
  %188 = or i32 %187, 8388608
  %189 = zext i32 %188 to i64
  %190 = mul nuw nsw i64 %189, 4266746795
  %191 = trunc i64 %190 to i32
  %192 = lshr i64 %190, 32
  %193 = mul nuw nsw i64 %189, 1011060801
  %194 = add nuw nsw i64 %192, %193
  %195 = trunc i64 %194 to i32
  %196 = lshr i64 %194, 32
  %197 = mul nuw nsw i64 %189, 3680671129
  %198 = add nuw nsw i64 %196, %197
  %199 = trunc i64 %198 to i32
  %200 = lshr i64 %198, 32
  %201 = mul nuw nsw i64 %189, 4113882560
  %202 = add nuw nsw i64 %200, %201
  %203 = trunc i64 %202 to i32
  %204 = lshr i64 %202, 32
  %205 = mul nuw nsw i64 %189, 4230436817
  %206 = add nuw nsw i64 %204, %205
  %207 = trunc i64 %206 to i32
  %208 = lshr i64 %206, 32
  %209 = mul nuw nsw i64 %189, 1313084713
  %210 = add nuw nsw i64 %208, %209
  %211 = trunc i64 %210 to i32
  %212 = lshr i64 %210, 32
  %213 = mul nuw nsw i64 %189, 2734261102
  %214 = add nuw nsw i64 %212, %213
  %215 = trunc i64 %214 to i32
  %216 = lshr i64 %214, 32
  %217 = trunc i64 %216 to i32
  %218 = add nsw i32 %186, -120
  %219 = icmp ugt i32 %218, 63
  %220 = select i1 %219, i32 %211, i32 %217
  %221 = select i1 %219, i32 %207, i32 %215
  %222 = select i1 %219, i32 %203, i32 %211
  %223 = select i1 %219, i32 %199, i32 %207
  %224 = select i1 %219, i32 %195, i32 %203
  %225 = select i1 %219, i32 %191, i32 %199
  %226 = select i1 %219, i32 -64, i32 0
  %227 = add nsw i32 %226, %218
  %228 = icmp ugt i32 %227, 31
  %229 = select i1 %228, i32 %221, i32 %220
  %230 = select i1 %228, i32 %222, i32 %221
  %231 = select i1 %228, i32 %223, i32 %222
  %232 = select i1 %228, i32 %224, i32 %223
  %233 = select i1 %228, i32 %225, i32 %224
  %234 = select i1 %228, i32 -32, i32 0
  %235 = add nsw i32 %234, %227
  %236 = icmp ugt i32 %235, 31
  %237 = select i1 %236, i32 %230, i32 %229
  %238 = select i1 %236, i32 %231, i32 %230
  %239 = select i1 %236, i32 %232, i32 %231
  %240 = select i1 %236, i32 %233, i32 %232
  %241 = select i1 %236, i32 -32, i32 0
  %242 = add nsw i32 %241, %235
  %243 = icmp eq i32 %242, 0
  %244 = sub nsw i32 32, %242
  %245 = tail call i32 @llvm.fshr.i32(i32 %237, i32 %238, i32 %244) #3
  %246 = tail call i32 @llvm.fshr.i32(i32 %238, i32 %239, i32 %244) #3
  %247 = tail call i32 @llvm.fshr.i32(i32 %239, i32 %240, i32 %244) #3
  %248 = select i1 %243, i32 %237, i32 %245
  %249 = select i1 %243, i32 %238, i32 %246
  %250 = select i1 %243, i32 %239, i32 %247
  %251 = lshr i32 %248, 29
  %252 = tail call i32 @llvm.fshl.i32(i32 %248, i32 %249, i32 2) #3
  %253 = tail call i32 @llvm.fshl.i32(i32 %249, i32 %250, i32 2) #3
  %254 = tail call i32 @llvm.fshl.i32(i32 %250, i32 %240, i32 2) #3
  %255 = and i32 %251, 1
  %256 = sub nsw i32 0, %255
  %257 = shl i32 %251, 31
  %258 = xor i32 %252, %256
  %259 = xor i32 %253, %256
  %260 = xor i32 %254, %256
  %261 = tail call i32 @llvm.ctlz.i32(i32 %258, i1 false) #3, !range !14
  %262 = sub nsw i32 31, %261
  %263 = tail call i32 @llvm.fshr.i32(i32 %258, i32 %259, i32 %262) #3
  %264 = tail call i32 @llvm.fshr.i32(i32 %259, i32 %260, i32 %262) #3
  %265 = mul nsw i32 %261, -8388608
  %266 = add nsw i32 %265, 1056964608
  %267 = or i32 %266, %257
  %268 = lshr i32 %263, 9
  %269 = or i32 %267, %268
  %270 = bitcast i32 %269 to float
  %271 = tail call i32 @llvm.fshl.i32(i32 %263, i32 %264, i32 23) #3
  %272 = tail call i32 @llvm.ctlz.i32(i32 %271, i1 false) #3, !range !14
  %273 = fmul float %270, 0x3FF921FB40000000
  %274 = add nuw nsw i32 %272, %261
  %275 = mul nsw i32 %274, -8388608
  %276 = add nsw i32 %275, 855638016
  %277 = or i32 %276, %257
  %278 = sub nsw i32 31, %272
  %279 = tail call i32 @llvm.fshr.i32(i32 %271, i32 %264, i32 %278) #3
  %280 = lshr i32 %279, 9
  %281 = or i32 %277, %280
  %282 = bitcast i32 %281 to float
  %283 = fneg float %273
  %284 = tail call float @llvm.fma.f32(float %270, float 0x3FF921FB40000000, float %283) #3
  %285 = tail call float @llvm.fma.f32(float %270, float 0x3E74442D00000000, float %284) #3
  %286 = tail call float @llvm.fma.f32(float %282, float 0x3FF921FB40000000, float %285) #3
  %287 = fadd float %273, %286
  %288 = lshr i32 %248, 30
  %289 = add nuw nsw i32 %255, %288
  br label %290

290:                                              ; preds = %176, %184
  %291 = phi i32 [ %183, %176 ], [ %185, %184 ]
  %292 = phi float [ %181, %176 ], [ %287, %184 ]
  %293 = phi i32 [ %182, %176 ], [ %289, %184 ]
  %294 = fmul float %292, %292
  %295 = tail call float @llvm.fmuladd.f32(float %294, float 0xBF29833040000000, float 0x3F81103880000000) #3
  %296 = tail call float @llvm.fmuladd.f32(float %294, float %295, float 0xBFC55553A0000000) #3
  %297 = fmul float %294, %296
  %298 = tail call float @llvm.fmuladd.f32(float %292, float %297, float %292) #3
  %299 = tail call float @llvm.fmuladd.f32(float %294, float 0x3EFAEA6680000000, float 0xBF56C9E760000000) #3
  %300 = tail call float @llvm.fmuladd.f32(float %294, float %299, float 0x3FA5557EE0000000) #3
  %301 = tail call float @llvm.fmuladd.f32(float %294, float %300, float 0xBFE0000080000000) #3
  %302 = tail call float @llvm.fmuladd.f32(float %294, float %301, float 1.000000e+00) #3
  %303 = and i32 %293, 1
  %304 = icmp eq i32 %303, 0
  %305 = select i1 %304, float %298, float %302
  %306 = bitcast float %305 to i32
  %307 = shl i32 %293, 30
  %308 = and i32 %307, -2147483648
  %309 = bitcast float %34 to i32
  %310 = xor i32 %291, %309
  %311 = xor i32 %310, %308
  %312 = xor i32 %311, %306
  %313 = bitcast i32 %312 to float
  %314 = select i1 %172, float %313, float 0x7FF8000000000000
  %315 = fmul contract float %35, %314
  %316 = fadd contract float %22, %315
  %317 = add nsw i32 %1, 1
  br label %318

318:                                              ; preds = %290, %7
  %319 = phi i32 [ 1, %290 ], [ 0, %7 ]
  %320 = phi float [ %316, %290 ], [ %22, %7 ]
  %321 = phi float [ %175, %290 ], [ %20, %7 ]
  %322 = phi i32 [ %317, %290 ], [ %1, %7 ]
  %323 = icmp slt i32 %322, %0
  br i1 %323, label %324, label %927

324:                                              ; preds = %318, %895
  %325 = phi i32 [ %923, %895 ], [ %322, %318 ]
  %326 = phi float [ %780, %895 ], [ %321, %318 ]
  %327 = phi float [ %921, %895 ], [ %320, %318 ]
  %328 = phi i32 [ %922, %895 ], [ %319, %318 ]
  %329 = zext i32 %328 to i64
  %330 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %329, i32 0
  %331 = load float, float addrspace(4)* %330, align 16, !tbaa !9
  %332 = fmul contract float %14, %331
  %333 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %329, i32 1
  %334 = load float, float addrspace(4)* %333, align 4, !tbaa !11
  %335 = fmul contract float %16, %334
  %336 = fadd contract float %332, %335
  %337 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %329, i32 2
  %338 = load float, float addrspace(4)* %337, align 8, !tbaa !12
  %339 = fmul contract float %18, %338
  %340 = fadd contract float %336, %339
  %341 = fmul contract float %340, 0x401921FB60000000
  %342 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %329, i32 3
  %343 = load float, float addrspace(4)* %342, align 4, !tbaa !13
  %344 = tail call float @llvm.fabs.f32(float %341) #3
  %345 = fcmp olt float %344, 1.310720e+05
  br i1 %345, label %346, label %353

346:                                              ; preds = %324
  %347 = fmul float %344, 0x3FE45F3060000000
  %348 = tail call float @llvm.rint.f32(float %347) #3
  %349 = tail call float @llvm.fma.f32(float %348, float 0xBFF921FB40000000, float %344) #3
  %350 = tail call float @llvm.fma.f32(float %348, float 0xBE74442D00000000, float %349) #3
  %351 = tail call float @llvm.fma.f32(float %348, float 0xBCF8469880000000, float %350) #3
  %352 = fptosi float %348 to i32
  br label %459

353:                                              ; preds = %324
  %354 = bitcast float %344 to i32
  %355 = lshr i32 %354, 23
  %356 = and i32 %354, 8388607
  %357 = or i32 %356, 8388608
  %358 = zext i32 %357 to i64
  %359 = mul nuw nsw i64 %358, 4266746795
  %360 = trunc i64 %359 to i32
  %361 = lshr i64 %359, 32
  %362 = mul nuw nsw i64 %358, 1011060801
  %363 = add nuw nsw i64 %361, %362
  %364 = trunc i64 %363 to i32
  %365 = lshr i64 %363, 32
  %366 = mul nuw nsw i64 %358, 3680671129
  %367 = add nuw nsw i64 %365, %366
  %368 = trunc i64 %367 to i32
  %369 = lshr i64 %367, 32
  %370 = mul nuw nsw i64 %358, 4113882560
  %371 = add nuw nsw i64 %369, %370
  %372 = trunc i64 %371 to i32
  %373 = lshr i64 %371, 32
  %374 = mul nuw nsw i64 %358, 4230436817
  %375 = add nuw nsw i64 %373, %374
  %376 = trunc i64 %375 to i32
  %377 = lshr i64 %375, 32
  %378 = mul nuw nsw i64 %358, 1313084713
  %379 = add nuw nsw i64 %377, %378
  %380 = trunc i64 %379 to i32
  %381 = lshr i64 %379, 32
  %382 = mul nuw nsw i64 %358, 2734261102
  %383 = add nuw nsw i64 %381, %382
  %384 = trunc i64 %383 to i32
  %385 = lshr i64 %383, 32
  %386 = trunc i64 %385 to i32
  %387 = add nsw i32 %355, -120
  %388 = icmp ugt i32 %387, 63
  %389 = select i1 %388, i32 %380, i32 %386
  %390 = select i1 %388, i32 %376, i32 %384
  %391 = select i1 %388, i32 %372, i32 %380
  %392 = select i1 %388, i32 %368, i32 %376
  %393 = select i1 %388, i32 %364, i32 %372
  %394 = select i1 %388, i32 %360, i32 %368
  %395 = select i1 %388, i32 -64, i32 0
  %396 = add nsw i32 %395, %387
  %397 = icmp ugt i32 %396, 31
  %398 = select i1 %397, i32 %390, i32 %389
  %399 = select i1 %397, i32 %391, i32 %390
  %400 = select i1 %397, i32 %392, i32 %391
  %401 = select i1 %397, i32 %393, i32 %392
  %402 = select i1 %397, i32 %394, i32 %393
  %403 = select i1 %397, i32 -32, i32 0
  %404 = add nsw i32 %403, %396
  %405 = icmp ugt i32 %404, 31
  %406 = select i1 %405, i32 %399, i32 %398
  %407 = select i1 %405, i32 %400, i32 %399
  %408 = select i1 %405, i32 %401, i32 %400
  %409 = select i1 %405, i32 %402, i32 %401
  %410 = select i1 %405, i32 -32, i32 0
  %411 = add nsw i32 %410, %404
  %412 = icmp eq i32 %411, 0
  %413 = sub nsw i32 32, %411
  %414 = tail call i32 @llvm.fshr.i32(i32 %406, i32 %407, i32 %413) #3
  %415 = tail call i32 @llvm.fshr.i32(i32 %407, i32 %408, i32 %413) #3
  %416 = tail call i32 @llvm.fshr.i32(i32 %408, i32 %409, i32 %413) #3
  %417 = select i1 %412, i32 %406, i32 %414
  %418 = select i1 %412, i32 %407, i32 %415
  %419 = select i1 %412, i32 %408, i32 %416
  %420 = lshr i32 %417, 29
  %421 = tail call i32 @llvm.fshl.i32(i32 %417, i32 %418, i32 2) #3
  %422 = tail call i32 @llvm.fshl.i32(i32 %418, i32 %419, i32 2) #3
  %423 = tail call i32 @llvm.fshl.i32(i32 %419, i32 %409, i32 2) #3
  %424 = and i32 %420, 1
  %425 = sub nsw i32 0, %424
  %426 = shl i32 %420, 31
  %427 = xor i32 %421, %425
  %428 = xor i32 %422, %425
  %429 = xor i32 %423, %425
  %430 = tail call i32 @llvm.ctlz.i32(i32 %427, i1 false) #3, !range !14
  %431 = sub nsw i32 31, %430
  %432 = tail call i32 @llvm.fshr.i32(i32 %427, i32 %428, i32 %431) #3
  %433 = tail call i32 @llvm.fshr.i32(i32 %428, i32 %429, i32 %431) #3
  %434 = mul nsw i32 %430, -8388608
  %435 = add nsw i32 %434, 1056964608
  %436 = or i32 %435, %426
  %437 = lshr i32 %432, 9
  %438 = or i32 %436, %437
  %439 = bitcast i32 %438 to float
  %440 = tail call i32 @llvm.fshl.i32(i32 %432, i32 %433, i32 23) #3
  %441 = tail call i32 @llvm.ctlz.i32(i32 %440, i1 false) #3, !range !14
  %442 = fmul float %439, 0x3FF921FB40000000
  %443 = add nuw nsw i32 %441, %430
  %444 = mul nsw i32 %443, -8388608
  %445 = add nsw i32 %444, 855638016
  %446 = or i32 %445, %426
  %447 = sub nsw i32 31, %441
  %448 = tail call i32 @llvm.fshr.i32(i32 %440, i32 %433, i32 %447) #3
  %449 = lshr i32 %448, 9
  %450 = or i32 %446, %449
  %451 = bitcast i32 %450 to float
  %452 = fneg float %442
  %453 = tail call float @llvm.fma.f32(float %439, float 0x3FF921FB40000000, float %452) #3
  %454 = tail call float @llvm.fma.f32(float %439, float 0x3E74442D00000000, float %453) #3
  %455 = tail call float @llvm.fma.f32(float %451, float 0x3FF921FB40000000, float %454) #3
  %456 = fadd float %442, %455
  %457 = lshr i32 %417, 30
  %458 = add nuw nsw i32 %424, %457
  br label %459

459:                                              ; preds = %346, %353
  %460 = phi float [ %351, %346 ], [ %456, %353 ]
  %461 = phi i32 [ %352, %346 ], [ %458, %353 ]
  %462 = fmul float %460, %460
  %463 = tail call float @llvm.fmuladd.f32(float %462, float 0xBF29833040000000, float 0x3F81103880000000) #3
  %464 = tail call float @llvm.fmuladd.f32(float %462, float %463, float 0xBFC55553A0000000) #3
  %465 = fmul float %462, %464
  %466 = tail call float @llvm.fmuladd.f32(float %460, float %465, float %460) #3
  %467 = tail call float @llvm.fmuladd.f32(float %462, float 0x3EFAEA6680000000, float 0xBF56C9E760000000) #3
  %468 = tail call float @llvm.fmuladd.f32(float %462, float %467, float 0x3FA5557EE0000000) #3
  %469 = tail call float @llvm.fmuladd.f32(float %462, float %468, float 0xBFE0000080000000) #3
  %470 = tail call float @llvm.fmuladd.f32(float %462, float %469, float 1.000000e+00) #3
  %471 = fneg float %466
  %472 = and i32 %461, 1
  %473 = icmp eq i32 %472, 0
  %474 = select i1 %473, float %470, float %471
  %475 = bitcast float %474 to i32
  %476 = shl i32 %461, 30
  %477 = and i32 %476, -2147483648
  %478 = xor i32 %477, %475
  %479 = bitcast i32 %478 to float
  %480 = tail call i1 @llvm.amdgcn.class.f32(float %344, i32 504) #3
  %481 = select i1 %480, float %479, float 0x7FF8000000000000
  %482 = fmul contract float %343, %481
  %483 = fadd contract float %326, %482
  br i1 %345, label %484, label %492

484:                                              ; preds = %459
  %485 = fmul float %344, 0x3FE45F3060000000
  %486 = tail call float @llvm.rint.f32(float %485) #3
  %487 = tail call float @llvm.fma.f32(float %486, float 0xBFF921FB40000000, float %344) #3
  %488 = tail call float @llvm.fma.f32(float %486, float 0xBE74442D00000000, float %487) #3
  %489 = tail call float @llvm.fma.f32(float %486, float 0xBCF8469880000000, float %488) #3
  %490 = fptosi float %486 to i32
  %491 = bitcast float %344 to i32
  br label %598

492:                                              ; preds = %459
  %493 = bitcast float %344 to i32
  %494 = lshr i32 %493, 23
  %495 = and i32 %493, 8388607
  %496 = or i32 %495, 8388608
  %497 = zext i32 %496 to i64
  %498 = mul nuw nsw i64 %497, 4266746795
  %499 = trunc i64 %498 to i32
  %500 = lshr i64 %498, 32
  %501 = mul nuw nsw i64 %497, 1011060801
  %502 = add nuw nsw i64 %500, %501
  %503 = trunc i64 %502 to i32
  %504 = lshr i64 %502, 32
  %505 = mul nuw nsw i64 %497, 3680671129
  %506 = add nuw nsw i64 %504, %505
  %507 = trunc i64 %506 to i32
  %508 = lshr i64 %506, 32
  %509 = mul nuw nsw i64 %497, 4113882560
  %510 = add nuw nsw i64 %508, %509
  %511 = trunc i64 %510 to i32
  %512 = lshr i64 %510, 32
  %513 = mul nuw nsw i64 %497, 4230436817
  %514 = add nuw nsw i64 %512, %513
  %515 = trunc i64 %514 to i32
  %516 = lshr i64 %514, 32
  %517 = mul nuw nsw i64 %497, 1313084713
  %518 = add nuw nsw i64 %516, %517
  %519 = trunc i64 %518 to i32
  %520 = lshr i64 %518, 32
  %521 = mul nuw nsw i64 %497, 2734261102
  %522 = add nuw nsw i64 %520, %521
  %523 = trunc i64 %522 to i32
  %524 = lshr i64 %522, 32
  %525 = trunc i64 %524 to i32
  %526 = add nsw i32 %494, -120
  %527 = icmp ugt i32 %526, 63
  %528 = select i1 %527, i32 %519, i32 %525
  %529 = select i1 %527, i32 %515, i32 %523
  %530 = select i1 %527, i32 %511, i32 %519
  %531 = select i1 %527, i32 %507, i32 %515
  %532 = select i1 %527, i32 %503, i32 %511
  %533 = select i1 %527, i32 %499, i32 %507
  %534 = select i1 %527, i32 -64, i32 0
  %535 = add nsw i32 %534, %526
  %536 = icmp ugt i32 %535, 31
  %537 = select i1 %536, i32 %529, i32 %528
  %538 = select i1 %536, i32 %530, i32 %529
  %539 = select i1 %536, i32 %531, i32 %530
  %540 = select i1 %536, i32 %532, i32 %531
  %541 = select i1 %536, i32 %533, i32 %532
  %542 = select i1 %536, i32 -32, i32 0
  %543 = add nsw i32 %542, %535
  %544 = icmp ugt i32 %543, 31
  %545 = select i1 %544, i32 %538, i32 %537
  %546 = select i1 %544, i32 %539, i32 %538
  %547 = select i1 %544, i32 %540, i32 %539
  %548 = select i1 %544, i32 %541, i32 %540
  %549 = select i1 %544, i32 -32, i32 0
  %550 = add nsw i32 %549, %543
  %551 = icmp eq i32 %550, 0
  %552 = sub nsw i32 32, %550
  %553 = tail call i32 @llvm.fshr.i32(i32 %545, i32 %546, i32 %552) #3
  %554 = tail call i32 @llvm.fshr.i32(i32 %546, i32 %547, i32 %552) #3
  %555 = tail call i32 @llvm.fshr.i32(i32 %547, i32 %548, i32 %552) #3
  %556 = select i1 %551, i32 %545, i32 %553
  %557 = select i1 %551, i32 %546, i32 %554
  %558 = select i1 %551, i32 %547, i32 %555
  %559 = lshr i32 %556, 29
  %560 = tail call i32 @llvm.fshl.i32(i32 %556, i32 %557, i32 2) #3
  %561 = tail call i32 @llvm.fshl.i32(i32 %557, i32 %558, i32 2) #3
  %562 = tail call i32 @llvm.fshl.i32(i32 %558, i32 %548, i32 2) #3
  %563 = and i32 %559, 1
  %564 = sub nsw i32 0, %563
  %565 = shl i32 %559, 31
  %566 = xor i32 %560, %564
  %567 = xor i32 %561, %564
  %568 = xor i32 %562, %564
  %569 = tail call i32 @llvm.ctlz.i32(i32 %566, i1 false) #3, !range !14
  %570 = sub nsw i32 31, %569
  %571 = tail call i32 @llvm.fshr.i32(i32 %566, i32 %567, i32 %570) #3
  %572 = tail call i32 @llvm.fshr.i32(i32 %567, i32 %568, i32 %570) #3
  %573 = mul nsw i32 %569, -8388608
  %574 = add nsw i32 %573, 1056964608
  %575 = or i32 %574, %565
  %576 = lshr i32 %571, 9
  %577 = or i32 %575, %576
  %578 = bitcast i32 %577 to float
  %579 = tail call i32 @llvm.fshl.i32(i32 %571, i32 %572, i32 23) #3
  %580 = tail call i32 @llvm.ctlz.i32(i32 %579, i1 false) #3, !range !14
  %581 = fmul float %578, 0x3FF921FB40000000
  %582 = add nuw nsw i32 %580, %569
  %583 = mul nsw i32 %582, -8388608
  %584 = add nsw i32 %583, 855638016
  %585 = or i32 %584, %565
  %586 = sub nsw i32 31, %580
  %587 = tail call i32 @llvm.fshr.i32(i32 %579, i32 %572, i32 %586) #3
  %588 = lshr i32 %587, 9
  %589 = or i32 %585, %588
  %590 = bitcast i32 %589 to float
  %591 = fneg float %581
  %592 = tail call float @llvm.fma.f32(float %578, float 0x3FF921FB40000000, float %591) #3
  %593 = tail call float @llvm.fma.f32(float %578, float 0x3E74442D00000000, float %592) #3
  %594 = tail call float @llvm.fma.f32(float %590, float 0x3FF921FB40000000, float %593) #3
  %595 = fadd float %581, %594
  %596 = lshr i32 %556, 30
  %597 = add nuw nsw i32 %563, %596
  br label %598

598:                                              ; preds = %484, %492
  %599 = phi i32 [ %491, %484 ], [ %493, %492 ]
  %600 = phi float [ %489, %484 ], [ %595, %492 ]
  %601 = phi i32 [ %490, %484 ], [ %597, %492 ]
  %602 = fmul float %600, %600
  %603 = tail call float @llvm.fmuladd.f32(float %602, float 0xBF29833040000000, float 0x3F81103880000000) #3
  %604 = tail call float @llvm.fmuladd.f32(float %602, float %603, float 0xBFC55553A0000000) #3
  %605 = fmul float %602, %604
  %606 = tail call float @llvm.fmuladd.f32(float %600, float %605, float %600) #3
  %607 = tail call float @llvm.fmuladd.f32(float %602, float 0x3EFAEA6680000000, float 0xBF56C9E760000000) #3
  %608 = tail call float @llvm.fmuladd.f32(float %602, float %607, float 0x3FA5557EE0000000) #3
  %609 = tail call float @llvm.fmuladd.f32(float %602, float %608, float 0xBFE0000080000000) #3
  %610 = tail call float @llvm.fmuladd.f32(float %602, float %609, float 1.000000e+00) #3
  %611 = and i32 %601, 1
  %612 = icmp eq i32 %611, 0
  %613 = select i1 %612, float %606, float %610
  %614 = bitcast float %613 to i32
  %615 = shl i32 %601, 30
  %616 = and i32 %615, -2147483648
  %617 = bitcast float %341 to i32
  %618 = xor i32 %599, %617
  %619 = xor i32 %618, %616
  %620 = xor i32 %619, %614
  %621 = bitcast i32 %620 to float
  %622 = select i1 %480, float %621, float 0x7FF8000000000000
  %623 = fmul contract float %343, %622
  %624 = fadd contract float %327, %623
  %625 = add nuw nsw i32 %328, 1
  %626 = zext i32 %625 to i64
  %627 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %626, i32 0
  %628 = load float, float addrspace(4)* %627, align 16, !tbaa !9
  %629 = fmul contract float %14, %628
  %630 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %626, i32 1
  %631 = load float, float addrspace(4)* %630, align 4, !tbaa !11
  %632 = fmul contract float %16, %631
  %633 = fadd contract float %629, %632
  %634 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %626, i32 2
  %635 = load float, float addrspace(4)* %634, align 8, !tbaa !12
  %636 = fmul contract float %18, %635
  %637 = fadd contract float %633, %636
  %638 = fmul contract float %637, 0x401921FB60000000
  %639 = getelementptr inbounds [1024 x %struct.kValues], [1024 x %struct.kValues] addrspace(4)* @ck, i64 0, i64 %626, i32 3
  %640 = load float, float addrspace(4)* %639, align 4, !tbaa !13
  %641 = tail call float @llvm.fabs.f32(float %638) #3
  %642 = fcmp olt float %641, 1.310720e+05
  br i1 %642, label %643, label %650

643:                                              ; preds = %598
  %644 = fmul float %641, 0x3FE45F3060000000
  %645 = tail call float @llvm.rint.f32(float %644) #3
  %646 = tail call float @llvm.fma.f32(float %645, float 0xBFF921FB40000000, float %641) #3
  %647 = tail call float @llvm.fma.f32(float %645, float 0xBE74442D00000000, float %646) #3
  %648 = tail call float @llvm.fma.f32(float %645, float 0xBCF8469880000000, float %647) #3
  %649 = fptosi float %645 to i32
  br label %756

650:                                              ; preds = %598
  %651 = bitcast float %641 to i32
  %652 = lshr i32 %651, 23
  %653 = and i32 %651, 8388607
  %654 = or i32 %653, 8388608
  %655 = zext i32 %654 to i64
  %656 = mul nuw nsw i64 %655, 4266746795
  %657 = trunc i64 %656 to i32
  %658 = lshr i64 %656, 32
  %659 = mul nuw nsw i64 %655, 1011060801
  %660 = add nuw nsw i64 %658, %659
  %661 = trunc i64 %660 to i32
  %662 = lshr i64 %660, 32
  %663 = mul nuw nsw i64 %655, 3680671129
  %664 = add nuw nsw i64 %662, %663
  %665 = trunc i64 %664 to i32
  %666 = lshr i64 %664, 32
  %667 = mul nuw nsw i64 %655, 4113882560
  %668 = add nuw nsw i64 %666, %667
  %669 = trunc i64 %668 to i32
  %670 = lshr i64 %668, 32
  %671 = mul nuw nsw i64 %655, 4230436817
  %672 = add nuw nsw i64 %670, %671
  %673 = trunc i64 %672 to i32
  %674 = lshr i64 %672, 32
  %675 = mul nuw nsw i64 %655, 1313084713
  %676 = add nuw nsw i64 %674, %675
  %677 = trunc i64 %676 to i32
  %678 = lshr i64 %676, 32
  %679 = mul nuw nsw i64 %655, 2734261102
  %680 = add nuw nsw i64 %678, %679
  %681 = trunc i64 %680 to i32
  %682 = lshr i64 %680, 32
  %683 = trunc i64 %682 to i32
  %684 = add nsw i32 %652, -120
  %685 = icmp ugt i32 %684, 63
  %686 = select i1 %685, i32 %677, i32 %683
  %687 = select i1 %685, i32 %673, i32 %681
  %688 = select i1 %685, i32 %669, i32 %677
  %689 = select i1 %685, i32 %665, i32 %673
  %690 = select i1 %685, i32 %661, i32 %669
  %691 = select i1 %685, i32 %657, i32 %665
  %692 = select i1 %685, i32 -64, i32 0
  %693 = add nsw i32 %692, %684
  %694 = icmp ugt i32 %693, 31
  %695 = select i1 %694, i32 %687, i32 %686
  %696 = select i1 %694, i32 %688, i32 %687
  %697 = select i1 %694, i32 %689, i32 %688
  %698 = select i1 %694, i32 %690, i32 %689
  %699 = select i1 %694, i32 %691, i32 %690
  %700 = select i1 %694, i32 -32, i32 0
  %701 = add nsw i32 %700, %693
  %702 = icmp ugt i32 %701, 31
  %703 = select i1 %702, i32 %696, i32 %695
  %704 = select i1 %702, i32 %697, i32 %696
  %705 = select i1 %702, i32 %698, i32 %697
  %706 = select i1 %702, i32 %699, i32 %698
  %707 = select i1 %702, i32 -32, i32 0
  %708 = add nsw i32 %707, %701
  %709 = icmp eq i32 %708, 0
  %710 = sub nsw i32 32, %708
  %711 = tail call i32 @llvm.fshr.i32(i32 %703, i32 %704, i32 %710) #3
  %712 = tail call i32 @llvm.fshr.i32(i32 %704, i32 %705, i32 %710) #3
  %713 = tail call i32 @llvm.fshr.i32(i32 %705, i32 %706, i32 %710) #3
  %714 = select i1 %709, i32 %703, i32 %711
  %715 = select i1 %709, i32 %704, i32 %712
  %716 = select i1 %709, i32 %705, i32 %713
  %717 = lshr i32 %714, 29
  %718 = tail call i32 @llvm.fshl.i32(i32 %714, i32 %715, i32 2) #3
  %719 = tail call i32 @llvm.fshl.i32(i32 %715, i32 %716, i32 2) #3
  %720 = tail call i32 @llvm.fshl.i32(i32 %716, i32 %706, i32 2) #3
  %721 = and i32 %717, 1
  %722 = sub nsw i32 0, %721
  %723 = shl i32 %717, 31
  %724 = xor i32 %718, %722
  %725 = xor i32 %719, %722
  %726 = xor i32 %720, %722
  %727 = tail call i32 @llvm.ctlz.i32(i32 %724, i1 false) #3, !range !14
  %728 = sub nsw i32 31, %727
  %729 = tail call i32 @llvm.fshr.i32(i32 %724, i32 %725, i32 %728) #3
  %730 = tail call i32 @llvm.fshr.i32(i32 %725, i32 %726, i32 %728) #3
  %731 = mul nsw i32 %727, -8388608
  %732 = add nsw i32 %731, 1056964608
  %733 = or i32 %732, %723
  %734 = lshr i32 %729, 9
  %735 = or i32 %733, %734
  %736 = bitcast i32 %735 to float
  %737 = tail call i32 @llvm.fshl.i32(i32 %729, i32 %730, i32 23) #3
  %738 = tail call i32 @llvm.ctlz.i32(i32 %737, i1 false) #3, !range !14
  %739 = fmul float %736, 0x3FF921FB40000000
  %740 = add nuw nsw i32 %738, %727
  %741 = mul nsw i32 %740, -8388608
  %742 = add nsw i32 %741, 855638016
  %743 = or i32 %742, %723
  %744 = sub nsw i32 31, %738
  %745 = tail call i32 @llvm.fshr.i32(i32 %737, i32 %730, i32 %744) #3
  %746 = lshr i32 %745, 9
  %747 = or i32 %743, %746
  %748 = bitcast i32 %747 to float
  %749 = fneg float %739
  %750 = tail call float @llvm.fma.f32(float %736, float 0x3FF921FB40000000, float %749) #3
  %751 = tail call float @llvm.fma.f32(float %736, float 0x3E74442D00000000, float %750) #3
  %752 = tail call float @llvm.fma.f32(float %748, float 0x3FF921FB40000000, float %751) #3
  %753 = fadd float %739, %752
  %754 = lshr i32 %714, 30
  %755 = add nuw nsw i32 %721, %754
  br label %756

756:                                              ; preds = %643, %650
  %757 = phi float [ %648, %643 ], [ %753, %650 ]
  %758 = phi i32 [ %649, %643 ], [ %755, %650 ]
  %759 = fmul float %757, %757
  %760 = tail call float @llvm.fmuladd.f32(float %759, float 0xBF29833040000000, float 0x3F81103880000000) #3
  %761 = tail call float @llvm.fmuladd.f32(float %759, float %760, float 0xBFC55553A0000000) #3
  %762 = fmul float %759, %761
  %763 = tail call float @llvm.fmuladd.f32(float %757, float %762, float %757) #3
  %764 = tail call float @llvm.fmuladd.f32(float %759, float 0x3EFAEA6680000000, float 0xBF56C9E760000000) #3
  %765 = tail call float @llvm.fmuladd.f32(float %759, float %764, float 0x3FA5557EE0000000) #3
  %766 = tail call float @llvm.fmuladd.f32(float %759, float %765, float 0xBFE0000080000000) #3
  %767 = tail call float @llvm.fmuladd.f32(float %759, float %766, float 1.000000e+00) #3
  %768 = fneg float %763
  %769 = and i32 %758, 1
  %770 = icmp eq i32 %769, 0
  %771 = select i1 %770, float %767, float %768
  %772 = bitcast float %771 to i32
  %773 = shl i32 %758, 30
  %774 = and i32 %773, -2147483648
  %775 = xor i32 %774, %772
  %776 = bitcast i32 %775 to float
  %777 = tail call i1 @llvm.amdgcn.class.f32(float %641, i32 504) #3
  %778 = select i1 %777, float %776, float 0x7FF8000000000000
  %779 = fmul contract float %640, %778
  %780 = fadd contract float %483, %779
  br i1 %642, label %781, label %789

781:                                              ; preds = %756
  %782 = fmul float %641, 0x3FE45F3060000000
  %783 = tail call float @llvm.rint.f32(float %782) #3
  %784 = tail call float @llvm.fma.f32(float %783, float 0xBFF921FB40000000, float %641) #3
  %785 = tail call float @llvm.fma.f32(float %783, float 0xBE74442D00000000, float %784) #3
  %786 = tail call float @llvm.fma.f32(float %783, float 0xBCF8469880000000, float %785) #3
  %787 = fptosi float %783 to i32
  %788 = bitcast float %641 to i32
  br label %895

789:                                              ; preds = %756
  %790 = bitcast float %641 to i32
  %791 = lshr i32 %790, 23
  %792 = and i32 %790, 8388607
  %793 = or i32 %792, 8388608
  %794 = zext i32 %793 to i64
  %795 = mul nuw nsw i64 %794, 4266746795
  %796 = trunc i64 %795 to i32
  %797 = lshr i64 %795, 32
  %798 = mul nuw nsw i64 %794, 1011060801
  %799 = add nuw nsw i64 %797, %798
  %800 = trunc i64 %799 to i32
  %801 = lshr i64 %799, 32
  %802 = mul nuw nsw i64 %794, 3680671129
  %803 = add nuw nsw i64 %801, %802
  %804 = trunc i64 %803 to i32
  %805 = lshr i64 %803, 32
  %806 = mul nuw nsw i64 %794, 4113882560
  %807 = add nuw nsw i64 %805, %806
  %808 = trunc i64 %807 to i32
  %809 = lshr i64 %807, 32
  %810 = mul nuw nsw i64 %794, 4230436817
  %811 = add nuw nsw i64 %809, %810
  %812 = trunc i64 %811 to i32
  %813 = lshr i64 %811, 32
  %814 = mul nuw nsw i64 %794, 1313084713
  %815 = add nuw nsw i64 %813, %814
  %816 = trunc i64 %815 to i32
  %817 = lshr i64 %815, 32
  %818 = mul nuw nsw i64 %794, 2734261102
  %819 = add nuw nsw i64 %817, %818
  %820 = trunc i64 %819 to i32
  %821 = lshr i64 %819, 32
  %822 = trunc i64 %821 to i32
  %823 = add nsw i32 %791, -120
  %824 = icmp ugt i32 %823, 63
  %825 = select i1 %824, i32 %816, i32 %822
  %826 = select i1 %824, i32 %812, i32 %820
  %827 = select i1 %824, i32 %808, i32 %816
  %828 = select i1 %824, i32 %804, i32 %812
  %829 = select i1 %824, i32 %800, i32 %808
  %830 = select i1 %824, i32 %796, i32 %804
  %831 = select i1 %824, i32 -64, i32 0
  %832 = add nsw i32 %831, %823
  %833 = icmp ugt i32 %832, 31
  %834 = select i1 %833, i32 %826, i32 %825
  %835 = select i1 %833, i32 %827, i32 %826
  %836 = select i1 %833, i32 %828, i32 %827
  %837 = select i1 %833, i32 %829, i32 %828
  %838 = select i1 %833, i32 %830, i32 %829
  %839 = select i1 %833, i32 -32, i32 0
  %840 = add nsw i32 %839, %832
  %841 = icmp ugt i32 %840, 31
  %842 = select i1 %841, i32 %835, i32 %834
  %843 = select i1 %841, i32 %836, i32 %835
  %844 = select i1 %841, i32 %837, i32 %836
  %845 = select i1 %841, i32 %838, i32 %837
  %846 = select i1 %841, i32 -32, i32 0
  %847 = add nsw i32 %846, %840
  %848 = icmp eq i32 %847, 0
  %849 = sub nsw i32 32, %847
  %850 = tail call i32 @llvm.fshr.i32(i32 %842, i32 %843, i32 %849) #3
  %851 = tail call i32 @llvm.fshr.i32(i32 %843, i32 %844, i32 %849) #3
  %852 = tail call i32 @llvm.fshr.i32(i32 %844, i32 %845, i32 %849) #3
  %853 = select i1 %848, i32 %842, i32 %850
  %854 = select i1 %848, i32 %843, i32 %851
  %855 = select i1 %848, i32 %844, i32 %852
  %856 = lshr i32 %853, 29
  %857 = tail call i32 @llvm.fshl.i32(i32 %853, i32 %854, i32 2) #3
  %858 = tail call i32 @llvm.fshl.i32(i32 %854, i32 %855, i32 2) #3
  %859 = tail call i32 @llvm.fshl.i32(i32 %855, i32 %845, i32 2) #3
  %860 = and i32 %856, 1
  %861 = sub nsw i32 0, %860
  %862 = shl i32 %856, 31
  %863 = xor i32 %857, %861
  %864 = xor i32 %858, %861
  %865 = xor i32 %859, %861
  %866 = tail call i32 @llvm.ctlz.i32(i32 %863, i1 false) #3, !range !14
  %867 = sub nsw i32 31, %866
  %868 = tail call i32 @llvm.fshr.i32(i32 %863, i32 %864, i32 %867) #3
  %869 = tail call i32 @llvm.fshr.i32(i32 %864, i32 %865, i32 %867) #3
  %870 = mul nsw i32 %866, -8388608
  %871 = add nsw i32 %870, 1056964608
  %872 = or i32 %871, %862
  %873 = lshr i32 %868, 9
  %874 = or i32 %872, %873
  %875 = bitcast i32 %874 to float
  %876 = tail call i32 @llvm.fshl.i32(i32 %868, i32 %869, i32 23) #3
  %877 = tail call i32 @llvm.ctlz.i32(i32 %876, i1 false) #3, !range !14
  %878 = fmul float %875, 0x3FF921FB40000000
  %879 = add nuw nsw i32 %877, %866
  %880 = mul nsw i32 %879, -8388608
  %881 = add nsw i32 %880, 855638016
  %882 = or i32 %881, %862
  %883 = sub nsw i32 31, %877
  %884 = tail call i32 @llvm.fshr.i32(i32 %876, i32 %869, i32 %883) #3
  %885 = lshr i32 %884, 9
  %886 = or i32 %882, %885
  %887 = bitcast i32 %886 to float
  %888 = fneg float %878
  %889 = tail call float @llvm.fma.f32(float %875, float 0x3FF921FB40000000, float %888) #3
  %890 = tail call float @llvm.fma.f32(float %875, float 0x3E74442D00000000, float %889) #3
  %891 = tail call float @llvm.fma.f32(float %887, float 0x3FF921FB40000000, float %890) #3
  %892 = fadd float %878, %891
  %893 = lshr i32 %853, 30
  %894 = add nuw nsw i32 %860, %893
  br label %895

895:                                              ; preds = %781, %789
  %896 = phi i32 [ %788, %781 ], [ %790, %789 ]
  %897 = phi float [ %786, %781 ], [ %892, %789 ]
  %898 = phi i32 [ %787, %781 ], [ %894, %789 ]
  %899 = fmul float %897, %897
  %900 = tail call float @llvm.fmuladd.f32(float %899, float 0xBF29833040000000, float 0x3F81103880000000) #3
  %901 = tail call float @llvm.fmuladd.f32(float %899, float %900, float 0xBFC55553A0000000) #3
  %902 = fmul float %899, %901
  %903 = tail call float @llvm.fmuladd.f32(float %897, float %902, float %897) #3
  %904 = tail call float @llvm.fmuladd.f32(float %899, float 0x3EFAEA6680000000, float 0xBF56C9E760000000) #3
  %905 = tail call float @llvm.fmuladd.f32(float %899, float %904, float 0x3FA5557EE0000000) #3
  %906 = tail call float @llvm.fmuladd.f32(float %899, float %905, float 0xBFE0000080000000) #3
  %907 = tail call float @llvm.fmuladd.f32(float %899, float %906, float 1.000000e+00) #3
  %908 = and i32 %898, 1
  %909 = icmp eq i32 %908, 0
  %910 = select i1 %909, float %903, float %907
  %911 = bitcast float %910 to i32
  %912 = shl i32 %898, 30
  %913 = and i32 %912, -2147483648
  %914 = bitcast float %638 to i32
  %915 = xor i32 %896, %914
  %916 = xor i32 %915, %913
  %917 = xor i32 %916, %911
  %918 = bitcast i32 %917 to float
  %919 = select i1 %777, float %918, float 0x7FF8000000000000
  %920 = fmul contract float %640, %919
  %921 = fadd contract float %624, %920
  %922 = add nuw nsw i32 %328, 2
  %923 = add nsw i32 %325, 2
  %924 = icmp ult i32 %328, 1022
  %925 = icmp slt i32 %923, %0
  %926 = select i1 %924, i1 %925, i1 false
  br i1 %926, label %324, label %927, !llvm.loop !15

927:                                              ; preds = %895, %318
  %928 = phi float [ %320, %318 ], [ %921, %895 ]
  %929 = phi float [ %321, %318 ], [ %780, %895 ]
  store float %929, float addrspace(1)* %19, align 4, !tbaa !5
  store float %928, float addrspace(1)* %21, align 4, !tbaa !5
  ret void
}

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i1 @llvm.amdgcn.class.f32(float, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fmuladd.f32(float, float, float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshr.i32(i32, i32, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.fshl.i32(i32, i32, i32) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.ctlz.i32(i32, i1 immarg) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fma.f32(float, float, float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.rint.f32(float) #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workitem.id.x() #2

; Function Attrs: mustprogress nofree nosync nounwind readnone speculatable willreturn
declare i32 @llvm.amdgcn.workgroup.id.x() #2

attributes #0 = { mustprogress nofree norecurse nosync nounwind willreturn "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #1 = { mustprogress nofree norecurse nosync nounwind "amdgpu-flat-work-group-size"="1,256" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx906" "target-features"="+16-bit-insts,+ci-insts,+dl-insts,+dot1-insts,+dot2-insts,+dot7-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst,+sramecc" "uniform-work-group-size"="true" }
attributes #2 = { mustprogress nofree nosync nounwind readnone speculatable willreturn }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!opencl.ocl.version = !{!2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 1}
!2 = !{i32 2, i32 0}
!3 = !{!"clang version 14.0.0 (http://10.15.3.7/dcutoolkit/driverruntime/llvm-project.git bdeeab053a8bf72a56bdf54d056a43ecb9dc2748)"}
!4 = !{i32 0, i32 1024}
!5 = !{!6, !6, i64 0}
!6 = !{!"float", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C++ TBAA"}
!9 = !{!10, !6, i64 0}
!10 = !{!"_ZTS7kValues", !6, i64 0, !6, i64 4, !6, i64 8, !6, i64 12}
!11 = !{!10, !6, i64 4}
!12 = !{!10, !6, i64 8}
!13 = !{!10, !6, i64 12}
!14 = !{i32 0, i32 33}
!15 = distinct !{!15, !16}
!16 = !{!"llvm.loop.mustprogress"}
